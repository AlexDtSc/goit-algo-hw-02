##### –î–ó. –¢–µ–º–∞ 1. –©–æ —Ç–∞–∫–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏? –í—Å—Ç—É–ø –¥–æ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
##### –î–ó. –¢–µ–º–∞ 2. –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö



### –ó–∞–≤–¥–∞–Ω–Ω—è 1
'''

–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —ñ–º—ñ—Ç—É—î –ø—Ä–∏–π–º–∞–Ω–Ω—è –π –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–æ–∫: –ø—Ä–æ–≥—Ä–∞–º–∞ –º–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏ (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ —ñ–Ω—à–∏–º–∏ –¥–∞–Ω–∏–º–∏), –¥–æ–¥–∞–≤–∞—Ç–∏ —ó—Ö –¥–æ —á–µ—Ä–≥–∏, –∞ –ø–æ—Ç—ñ–º –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –≤–∏–¥–∞–ª—è—Ç–∏ –∑ —á–µ—Ä–≥–∏ –¥–ª—è "–æ–±—Ä–æ–±–∫–∏", —ñ–º—ñ—Ç—É—é—á–∏ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º —Ä–æ–±–æ—Ç—É —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É.



–û—Å—å –ø—Å–µ–≤–¥–æ–∫–æ–¥ –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —á–µ—Ä–≥–∏ (Queue –∑ –º–æ–¥—É–ª—è queue –≤ Python) –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–æ–∫:

import Queue

–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É –∑–∞—è–≤–æ–∫
queue = Queue()

–§—É–Ω–∫—Ü—ñ—è generate_request():
    –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É
    –î–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –¥–æ —á–µ—Ä–≥–∏

–§—É–Ω–∫—Ü—ñ—è process_request():
    –Ø–∫—â–æ —á–µ—Ä–≥–∞ –Ω–µ –ø—É—Å—Ç–∞:
        –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É –∑ —á–µ—Ä–≥–∏
        –û–±—Ä–æ–±–∏—Ç–∏ –∑–∞—è–≤–∫—É
    –Ü–Ω–∞–∫—à–µ:
        –í–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ —á–µ—Ä–≥–∞ –ø—É—Å—Ç–∞

–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏:
    –ü–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–π–¥–µ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏:
        –í–∏–∫–æ–Ω–∞—Ç–∏ generate_request() –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫
        –í–∏–∫–æ–Ω–∞—Ç–∏ process_request() –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–æ–∫



–£ —Ü—å–æ–º—É –ø—Å–µ–≤–¥–æ–∫–æ–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–≤—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: generate_request(), —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î –Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏ —Ç–∞ –¥–æ–¥–∞—î —ó—Ö –¥–æ —á–µ—Ä–≥–∏, —Ç–∞ process_request(), —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î –∑–∞—è–≤–∫–∏, –≤–∏–¥–∞–ª—è—é—á–∏ —ó—Ö —ñ–∑ —á–µ—Ä–≥–∏. –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏ –≤–∏–∫–æ–Ω—É—î —Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —ñ–º—ñ—Ç—É—é—á–∏ –ø–æ—Å—Ç—ñ–π–Ω–∏–π –ø–æ—Ç—ñ–∫ –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫ —Ç–∞ —ó—Ö –æ–±—Ä–æ–±–∫—É.
'''

import queue
import time
import random

def generate_request(request_queue, request_id):
    request_data = f'–ó–∞—è–≤–∫–∞ ‚Ññ {request_id}'
    request_queue.put(request_data)
    print(f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É: {request_data}')


def process_request(request_queue):
    if not request_queue.empty():
        request_data = request_queue.get()
        print(f'–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏: {request_data}')
        # –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É
        time.sleep(random.uniform(0.5, 2.0))
    else:
        print('–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è. –ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏')


def main():
    request_queue = queue.Queue()
    request_id = 0

    try:
        while True:
            time.sleep(1) # –°–∏–º—É–ª—è—Ü—ñ—è —á–∞—Å—É –º—ñ–∂ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –∑–∞—è–≤–æ–∫

            # –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫
            if random.choice([True, False]):
                request_id += 1
                generate_request(request_queue, request_id)

            # –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–æ–∫
            if random.choice([True, False]):
                process_request(request_queue)
    
    except KeyboardInterrupt:
        print('\n–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º')

if __name__ == '__main__':
    main()


'–ü—Ä–∏–º—ñ—Ç–∫–∞:'
'–ü—Ä–æ–≥—Ä–∞–º–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ–∞–π–ª—É. '
'–©–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É —ñ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —ó—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–µ–±–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ Ctrl + C —É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ –∞–±–æ –∫–æ–º–∞–Ω–¥–Ω–æ–º—É —Ä—è–¥–∫—É, –¥–µ –≤–æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞ - –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è KeyboardInterrupt'




### –ó–∞–≤–¥–∞–Ω–Ω—è 2

'''
–ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ —è–∫ –≤—Ö—ñ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –¥–æ–¥–∞—î –≤—Å—ñ –π–æ–≥–æ —Å–∏–º–≤–æ–ª–∏ –¥–æ –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—å–æ—ó —á–µ—Ä–≥–∏ (deque –∑ –º–æ–¥—É–ª—è collections –≤ Python), 
–∞ –ø–æ—Ç—ñ–º –ø–æ—Ä—ñ–≤–Ω—é—î —Å–∏–º–≤–æ–ª–∏ –∑ –æ–±–æ—Ö –∫—ñ–Ω—Ü—ñ–≤ —á–µ—Ä–≥–∏, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ —î —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º. –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —è–∫ —Ä—è–¥–∫–∏ –∑ –ø–∞—Ä–Ω–æ—é, 
—Ç–∞–∫ —ñ –∑ –Ω–µ–ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –±—É—Ç–∏ –Ω–µ—á—É—Ç–ª–∏–≤–æ—é –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤.

–ö–æ–¥ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ deque –∑ –º–æ–¥—É–ª—è collections —É Python.
–ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∑–∞–¥–∞–Ω–∏–π —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ä—è–¥–∫–∏ –∑ –ø–∞—Ä–Ω–æ—é —Ç–∞ –Ω–µ–ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤, —Ç–∞ —î –Ω–µ—á—É—Ç–ª–∏–≤–æ—é –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤.
'''

import re
from collections import deque

def is_palindrome(string) -> bool:
    modified_string = re.sub(r'[^a-zA-Z]', '', string).lower()   # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –æ–∫—Ä—ñ–º –±—É–∫–≤–µ–Ω–Ω–∏—Ö (–≤ —Ç.—á. –∫–æ–º–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–æ—â–æ) —Ç–∞ –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    q = deque(modified_string)                                   # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—é —á–µ—Ä–≥—É (–ø–æ —Ñ–∞–∫—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –∑ –¥–≤–æ—Ö —Å—Ç–æ—Ä—ñ–Ω —Ä–µ–¥–∞–≥—É—î–º–∏–π)
    while len(q) > 1:                                            # –¥–æ–∫–∏ –¥–æ–≤–∂–∏–Ω–∞ q –±—ñ–ª—å—à–µ 1
        if q.popleft() != q.pop():
            return False
    return True                                                  # True - –ø–∞–ª—ñ–Ω–¥—Ä–æ–º, —è–∫—â–æ q.popleft() == q.pop(), –∞–±–æ –¥–æ–≤–∂–∏–Ω–∞ –≤ q –∑–∞–ª–∏—à–∏–ª–æ—Å—è 0 –∞–±–æ 1 —Å–∏–º–≤–æ–ª—ñ–≤


# === –¢–ï–°–¢–ò ===

def test_true_palindromes():
    # –ù–∞–≤–º–∏—Å–Ω–æ
    assert is_palindrome("Racecar") == True
    assert is_palindrome("Able was I ere I saw Elba") == True
    assert is_palindrome("Madam In Eden, I'm Adam") == True, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'Madam In Eden, I'm Adam'"
    assert is_palindrome("A Santa at NASA") == True, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'A Santa at NASA'"

def test_not_palindromes():
    # –ù–µ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–∏
    assert is_palindrome("Python") == False, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'Python'"
    assert is_palindrome("Opera") == False, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'Opera'"

def test_true_palindromes_with_punctuation():
    # –Ü–∑ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—î—é
    assert is_palindrome("Was it a car or a cat I saw?") == True, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'Was it a car or a cat I saw?'"
    assert is_palindrome("No 'x' in Nixon") == True, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'No 'x' in Nixon'"

def test_short_palindromes():
    # –ö–æ—Ä–æ—Ç–∫—ñ —Ä—è–¥–∫–∏ —Ç–∞ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫
    assert is_palindrome("a") == True, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'a'"
    assert is_palindrome("") == True, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫"

def test_mixed_upper_lower():
    # –ó–º—ñ—à–∞–Ω—ñ —Ä–µ–≥—ñ—Å—Ç—Ä–∏
    assert is_palindrome("Eva, Can I Stab Bats In A Cave?") == True, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'Eva, Can I Stab Bats In A Cave?'"
    assert is_palindrome("Mr. Owl Ate My Metal Worm") == True, "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 'Mr. Owl Ate My Metal Worm'"



# === –ó–ê–ü–£–°–ö –¢–ï–°–¢–Ü–í ===

if __name__ == "__main__":
    test_true_palindromes()
    test_not_palindromes()
    test_true_palindromes_with_punctuation()
    test_short_palindromes()
    test_mixed_upper_lower()
    print("‚úÖ –£—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

    

### –ó–∞–≤–¥–∞–Ω–Ω—è 3

'''
–ó–∞–≤–¥–∞–Ω–Ω—è 3 (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è)

–£ –±–∞–≥–∞—Ç—å–æ—Ö –º–æ–≤–∞—Ö –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–∏ –º–∞—î–º–æ —Å–ø—Ä–∞–≤—É –∑ –≤–∏—Ä–∞–∑–∞–º–∏, –≤–∏–¥—ñ–ª–µ–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏, —Ç–∞–∫–∏–º–∏ —è–∫ –∫—Ä—É–≥–ª—ñ ( ), –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ [ ] –∞–±–æ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ { }.



–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —á–∏—Ç–∞—î —Ä—è–¥–æ–∫ –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ( ) { [ ] ( ) ( ) { } } }, —ñ –Ω–∞–¥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, –Ω–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ( ( ( ) , –∞–±–æ –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Ä—ñ–∑–Ω–∏—Ö –≤–∏–¥—ñ–≤ —Å—Ç–æ—è—Ç—å —É –ø–∞—Ä—ñ, —è–∫-–æ—Ç ( }.

 üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–µ–∫, —â–æ–± –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ.


–ü—Ä–∏–∫–ª–∞–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:

( ){[ 1 ]( 1 + 3 )( ){ }}: –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ
( 23 ( 2 - 3);: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ
( 11 }: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ


–ó–∞–≤–¥–∞–Ω–Ω—è 3 (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è):
–ó–∞–≤–¥–∞–Ω–Ω—è —î –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º, —Ç–æ–º—É –Ω–µ –æ—Ü—ñ–Ω—é—î—Ç—å—Å—è, –ø—Ä–æ—Ç–µ, –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º, –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –≤—ñ–¥ –º–µ–Ω—Ç–æ—Ä–∞.
'''

import re

def check_brackets(expression):                               
    # –û—á–∏—â–∞—î–º–æ —Ä—è–¥–æ–∫: –∑–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ –¥—É–∂–∫–∏
    brackets = re.sub(r'[^\[\]\(\)\{\}]', '', expression)
    
    # –°–ª–æ–≤–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π
    bracket_pairs = {')': '(', ']': '[', '}': '{'}
    
    # –°—Ç–µ–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥—É–∂–æ–∫
    stack = []
    
    for char in brackets:                                          # 1 –ø—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É —É –≤–∏—Ä–∞–∑—ñ.
        if char in '([{':                                           # 1.1 –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –¥–æ—Ä—ñ–≤–Ω—é—î –æ–¥–Ω—É –∑ –≤–∏–¥—ñ–≤ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥—É–∂–æ–∫ ([{
            stack.append(char)                                       #  1.1.1 –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –¥—É–∂–∫–∏ –∫–ª–∞–¥–µ–º–æ —É —Å—Ç–µ–∫
        elif char in ')]}':                                         # 1.2 –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –¥–æ—Ä—ñ–≤–Ω—é—î –æ–¥–Ω—É –∑ –≤–∏–¥—ñ–≤ –∑–∞–∫—Ä–∏—Ç–∏—Ö –¥—É–∂–æ–∫ )]}
            if not stack or stack[-1] != bracket_pairs[char]:        # 1.2.1 –ê–±–æ —Å—Ç–µ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π (–Ø–∫—â–æ –º–∏ –ø–µ—Ä—à–æ—é –∑—É—Å—Ç—Ä—ñ–ª–∏ –∑–∞–∫—Ä–∏—Ç—É –¥—É–∂–∫—É, –∞–ª–µ —â–µ –Ω–µ –±—É–ª–æ –∂–æ–¥–Ω–æ—ó –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó, —Ç–æ —Ü–µ –≤–∂–µ –ø–æ–º–∏–ª–∫–∞) –∞–±–æ —è–∫—â–æ –Ω–∞—Ç—Ä–∞–ø–ª—è—î–º–æ –Ω–∞ –∑–∞–∫—Ä–∏—Ç—É –¥—É–∂–∫—É ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–æ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–¥–∫—Ä–∏—Ç—ñ–π
                return f"{expression}: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ"                  # 1.2.1.1 —è–∫—â–æ –Ω—ñ ‚Äî –≤–∏—Ä–∞–∑ –Ω–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–∏–π.
            stack.pop()                                              # 1.2.2 –ó–∞–∫—Ä–∏—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ ‚Äî —Ç–æ–º—É –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–∫—Ä–∏—Ç—É –¥—É–∂–∫—É –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∑—ñ —Å—Ç–µ–∫—É
    
    # –Ø–∫—â–æ –ø—ñ—Å–ª—è –ø—Ä–æ—Ö–æ–¥—É —Å—Ç–µ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –¥—É–∂–∫–∏ —Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ
    if not stack:                                                 # –Ø–∫—â–æ –ø—ñ—Å–ª—è –ø—Ä–æ—Ö–æ–¥—É —Å—Ç–µ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî —É—Å–µ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ.
        return f"{expression}: –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ"
    else:
        return f"{expression}: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ"

# –¢–µ—Å—Ç–∏
examples = [
    "( ){[ 1 ]( 1 + 3 )( ){ }}",
    "( 23 ( 2 - 3);",
    "( 11 }"
]

for ex in examples:
    print(check_brackets(ex))
